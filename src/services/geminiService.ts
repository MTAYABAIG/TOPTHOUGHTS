import { GoogleGenerativeAI } from '@google/generative-ai';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

class GeminiService {
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor() {
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('Gemini API key not configured');
    }
    
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-pro' });
  }

  async sendMessage(message: string, conversationHistory: ChatMessage[] = []): Promise<string> {
    try {
      // Build conversation context
      const context = conversationHistory
        .slice(-10) // Keep last 10 messages for context
        .map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)
        .join('\n');

      const prompt = context 
        ? `Previous conversation:\n${context}\n\nUser: ${message}\n\nAssistant:`
        : `User: ${message}\n\nAssistant:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Gemini API error:', error);
      throw new Error('Failed to get response from Gemini AI');
    }
  }

  async generateVideoTitle(description: string): Promise<string> {
    try {
      const prompt = `Generate a compelling YouTube video title for this content: "${description}". Make it engaging, SEO-friendly, and under 60 characters.`;
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text().replace(/"/g, '');
    } catch (error) {
      console.error('Error generating video title:', error);
      return 'Untitled Video';
    }
  }

  async generateVideoDescription(title: string, content: string): Promise<string> {
    try {
      const prompt = `Create a YouTube video description for a video titled "${title}" with this content: "${content}". Include relevant hashtags and make it engaging.`;
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Error generating video description:', error);
      return 'Video description generated by AI.';
    }
  }

  async generateVideoTags(title: string, description: string): Promise<string[]> {
    try {
      const prompt = `Generate 10 relevant YouTube tags for a video titled "${title}" with description: "${description}". Return only the tags separated by commas.`;
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text().split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
    } catch (error) {
      console.error('Error generating video tags:', error);
      return ['video', 'content', 'youtube'];
    }
  }
}

export const geminiService = new GeminiService();
export type { ChatMessage };